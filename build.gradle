plugins {
    id "dev.architectury.loom" version "1.5-SNAPSHOT"
    id "maven-publish"
}

repositories {
    maven {
        url "https://papermc.io/repo/repository/maven-public/"
    }

    maven {
        url "https://maven.neoforged.net/releases/"
    }
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

base {
    archivesName = project.archives_base_name
    version = project.mod_version + "+mc" + project.minecraft_version + "-real"
    group = project.maven_group
}

loom {
    forge {
        convertAccessWideners = true
        mixinConfigs = [
                "krypton.mixins.json"
        ]

        dataGen {
            mod project.mod_id
        }
    }

    accessWidenerPath = file("src/main/resources/krypton.accesswidener")
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.10.0-M1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.10.0-M1")

    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
    forge("net.neoforged:forge:${project. minecraft_version}-${project.forge_version}")

    modImplementation(forgeRuntimeLibrary(include("com.velocitypowered:velocity-native:3.2.0-SNAPSHOT"))) { transitive = false }
}

test {
    useJUnitPlatform()
}

processResources {
    inputs.property "version", project.version
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.release = 17
}

java {
    withSourcesJar()
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = base.archivesName.get()
        }
    }
}

afterEvaluate {
    tasks.getByName("configureClientLaunch").doFirst {
        loom {
            runs {
                all {
                    property("fabric.development=true")
                    property("mixin.hotSwap")
                    // vmArg("-javaagent:${dependencies.module(group = "net.fabricmc", name = "sponge-mixin")}")
                    def mixinJarFile = configurations.compileClasspath.files {
                        it.group == "net.fabricmc" && it.name == "sponge-mixin"
                    }.find { true }
                    vmArg("-javaagent:$mixinJarFile")

                    ideConfigGenerated = true
                }
            }
        }
    }
}
